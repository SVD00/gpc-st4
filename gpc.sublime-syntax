%YAML 1.2
---
name: GPC

file_extensions: [gpc]

scope: source.gpc

variables:
  gpc_support: 'data|set_bit|clear_bit|test_bit|set_bits|get_bits|combo_run|combo_running|combo_stop|combo_restart|abs|inv|pow|isqrt|random|get_rtime|get_slot|load_slot|get_ctrlbutton|vm_tctrl|set_polar|set_rgb|set_hsb|clamp_function|pixel_oled|line_oled|rect_oled|circle_oled|putc_oled|puts_oled|cls_oled|printf|get_console|set_val|block_all_inputs|ps4_authtimeout|output_reconnection|output_protocol|get_led|get_rumble|get_val|set_val|get_ival|get_lval|get_ptime|get_controller|get_battery|event_press|event_release|get_brtime|swap|block|sensitivity|deadzone|stickize|ps4_touchpad|ps4_set_touchpad|turn_off|wiir_offscreen|get_rumble|set_rumble|block_rumble|reset_rumble|set_led|get_keyboard|get_modifiers|get_mk|set_mk|print|wait'
  gpc_control: 'if|else|for|while|do|switch|case|return|break'
  gpc_keyword: 'PS3_PS|PS3_SELECT|PS3_START|PS3_R1|PS3_R2|PS3_R3|PS3_L1|PS3_L2|PS3_L3|PS3_RX|PS3_RY|PS3_LX|PS3_LY|PS3_UP|PS3_DOWN|PS3_LEFT|PS3_RIGHT|PS3_TRIANGLE|PS3_CIRCLE|PS3_CROSS|PS3_SQUARE|PS3_ACCX|PS3_ACCY|PS3_ACCZ|PS3_GYRO|PS4_PS|PS4_SHARE|PS4_OPTIONS|PS4_R1|PS4_R2|PS4_R3|PS4_L1|PS4_L2|PS4_L3|PS4_RX|PS4_RY|PS4_LX|PS4_LY|PS4_UP|PS4_DOWN|PS4_LEFT|PS4_RIGHT|PS4_TRIANGLE|PS4_CIRCLE|PS4_CROSS|PS4_SQUARE|PS4_ACCX|PS4_ACCY|PS4_ACCZ|PS4_GYROX|PS4_GYROY|PS4_GYROZ|PS4_TOUCH|PS4_TOUCHX|PS4_TOUCHY|XB360_XBOX|XB360_BACK|XB360_START|XB360_RB|XB360_RT|XB360_RS|XB360_LB|XB360_LT|XB360_LS|XB360_RX|XB360_RY|XB360_LX|XB360_LY|XB360_UP|XB360_DOWN|XB360_LEFT|XB360_RIGHT|XB360_Y|XB360_B|XB360_A|XB360_X|XB1_XBOX|XB1_VIEW|XB1_MENU|XB1_RB|XB1_RT|XB1_RS|XB1_LB|XB1_LT|XB1_LS|XB1_RX|XB1_RY|XB1_LX|XB1_LY|XB1_UP|XB1_DOWN|XB1_LEFT|XB1_RIGHT|XB1_PL1|XB1_PL2|XB1_PR1|XB1_PR2|XB1_Y|XB1_B|XB1_A|XB1_X|WII_HOME|WII_MINUS|WII_PLUS|WII_RT|WII_ZR|WII_LT|WII_ZL|WII_RX|WII_RY|WII_LX|WII_LY|WII_UP|WII_DOWN|WII_LEFT|WII_RIGHT|WII_X|WII_B|WII_A|WII_Y|WII_ACCX|WII_ACCY|WII_ACCZ|WII_ACCNX|WII_ACCNY|WII_ACCNZ|WII_IRX|WII_IRY|PVAR_1|PVAR_2|PVAR_3|PVAR_4|PVAR_5|PVAR_6|PVAR_7|PVAR_8|PVAR_9|PVAR_10|PVAR_11|PVAR_12|PVAR_13|PVAR_14|PVAR_15|PVAR_16|SPVAR_1|SPVAR_2|SPVAR_3|SPVAR_4|SPVAR_5|SPVAR_6|SPVAR_7|SPVAR_8|SPVAR_9|SPVAR_10|SPVAR_11|SPVAR_12|SPVAR_13|SPVAR_14|SPVAR_15|SPVAR_16|CEMU_EXTRA1|CEMU_EXTRA2|CEMU_EXTRA3|CEMU_EXTRA4|CEMU_EXTRA5|CEMU_EXTRA6|CEMU_EXTRA7|CEMU_EXTRA8|CEMU_EXTRA9|FALSE|TRUE|NOT_USE|ALL_REMAPS|DZ_CIRCLE|PS4T_P1|PS4T_P1X|PS4T_P1Y|PS4T_P2|PS4T_P2X|PS4T_P2Y|PIO_PS4|PIO_PS3|PIO_XB1|PIO_XB360|PIO_WII|TRACE_1|TRACE_2|TRACE_3|TRACE_4|TRACE_5|TRACE_6|RUMBLE_A|RUMBLE_B|RUMBLE_LT|RUMBLE_RT|LED_1|LED_2|LED_3|LED_4|G25_PS|G25_SELECT|G25_START|G25_RPADDLE|G25_R2|G25_R3|G25_LPADDLE|G25_L2|G25_L3|G25_GAS|G25_CLUTCH|G25_STEERING|G25_BRAKE|G25_UP|G25_DOWN|G25_LEFT|G25_RIGHT|G25_TRIANGLE|G25_CIRCLE|G25_CROSS|G25_SQUARE|G25_SHIFT|G27_PS|G27_SELECT|G27_START|G27_RPADDLE|G27_R2|G27_R3|G27_LPADDLE|G27_L2|G27_L3|G27_GAS|G27_CLUTCH|G27_STEERING|G27_BRAKE|G27_UP|G27_DOWN|G27_LEFT|G27_RIGHT|G27_TRIANGLE|G27_CIRCLE|G27_CROSS|G27_SQUARE|G27_SHIFT|G27_L4|G27_L5|G27_R4|G27_R5|G29_PS|G29_SELECT|G29_START|G29_RPADDLE|G29_R2|G29_R3|G29_LPADDLE|G29_L2|G29_L3|G29_GAS|G29_CLUTCH|G29_STEERING|G29_BRAKE|G29_UP|G29_DOWN|G29_LEFT|G29_RIGHT|G29_TRIANGLE|G29_CIRCLE|G29_CROSS|G29_SQUARE|G29_SHIFT|G29_UP_ARROW|G29_DOWN_ARROW|G29_DIAL_CCW|G29_DIAL_CW|G29_DIAL|DF_PS|DF_SELECT|DF_START|DF_RPADDLE|DF_R2|DF_R3|DF_LPADDLE|DF_L2|DF_L3|DF_GAS|DF_CLUTCH|DF_STEERING|DF_BRAKE|DF_UP|DF_DOWN|DF_LEFT|DF_RIGHT|DF_TRIANGLE|DF_CIRCLE|DF_CROSS|DF_SQUARE|DF_SHIFT|DFPRO_PS|DFPRO_SELECT|DFPRO_START|DFPRO_RPADDLE|DFPRO_R2|DFPRO_R3|DFPRO_LPADDLE|DFPRO_L2|DFPRO_L3|DFPRO_GAS|DFPRO_CLUTCH|DFPRO_STEERING|DFPRO_BRAKE|DFPRO_UP|DFPRO_DOWN|DFPRO_LEFT|DFPRO_RIGHT|DFPRO_TRIANGLE|DFPRO_CIRCLE|DFPRO_CROSS|DFPRO_SQUARE|DFPRO_SHIFT|DFGT_PS|DFGT_SELECT|DFGT_START|DFGT_RPADDLE|DFGT_R2|DFGT_R3|DFGT_LPADDLE|DFGT_L2|DFGT_L3|DFGT_GAS|DFGT_STEERING|DFGT_BRAKE|DFGT_UP|DFGT_DOWN|DFGT_LEFT|DFGT_RIGHT|DFGT_TRIANGLE|DFGT_CIRCLE|DFGT_CROSS|DFGT_SQUARE|DFGT_UP_ARROW|DFGT_DOWN_ARROW|DFGT_DIAL_CCW|DFGT_DIAL_CW|DFGT_DIAL'
  gpc_type: 'int32|uint16|int16|uint8|int8|int|string|image|byte|char'

  identifier: '[[A-Za-z0-9]_]+'

contexts:
  prototype:
    - include: comment

  main:
    - include: definitions
    - include: expressions


  support:
    - match: '\b{{gpc_support}}\b'
      scope: support.function.gpc function-call
    - match: '\b{{gpc_keyword}}\b'
      scope: support.constant.gpc

  # [keywords]
  definitions:
    # function definition
    - match: '\bfunction\b'
      scope: keyword.function.gpc
      set:
        - match: '{{identifier}}(?=\s*\()'
          scope: meta.function.gpc entity.name.function.gpc
          set:
            - match: \(
              scope: punctuation.section.group.begin
              set:
                - meta_scope: meta.group.gpc meta.function.parameters.gpc
                - match: \)
                  scope: punctuation.section.group.end
                  set: function-block
                - match: '{{identifier}}(?=\s*(,|\)))'
                  scope: variable.parameter.gpc

                - include: expressions
    # combo definition
    - match: '\bcombo\b'
      scope: keyword.function.gpc
      set:
        - match: '{{identifier}}(?=\s*\{)'
          scope: meta.function.gpc entity.name.function.gpc
          set: function-block
    # sections
    - match: '\b(main|init)\b'
      scope: variable.language.gpc meta.function.gpc entity.name.function.gpc
      set: function-block
    # define
    - match: '\bdefine\b'
      scope: keyword.declaration.gpc
      set:
        - match: '{{identifier}}(?=\s*\=)'
          scope: entity.name.constant
          pop: true
    # remap
    - match: '\bremap\b'
      scope: keyword.declaration.gpc
      pop: true
    # enum
    - match: '\benum\b'
      scope: keyword.declaration.enum.gpc meta.enum.gpc
      set: enum-block

  # Expressions
  expressions:
    # Support contains builtin GPC functions / keywords for highlighting
    - include: support
    - include: parens
    - include: block
    - include: operators
    - include: type
    - include: statements
    - include: call
    - include: string
    - include: integer
    - match: ';'
      scope: punctuation.terminator.gpc
      pop: true
    - match: ','
      scope: punctuation.separator.gpc

  type:
    - match: '\b{{gpc_type}}\b'
      scope: storage.type.gpc

  parens:
    - match: \(
      scope: punctuation.section.group.begin
      set:
        - meta_scope: meta.group.gpc
        - match: \)
          scope: punctuation.section.group.end
          pop: true

        - include: expressions

  block:
    - match: '\{'
      scope: meta.block.gpc punctuation.section.block.begin.gpc
      set:
        - meta_content_scope: meta.block.gpc
        - match: '\}'
          scope: punctuation.section.block.end.gpc
          pop: true

        - include: expressions
  function-block:
    - meta_content_scope: meta.function.gpc
    - match: '\{'
      scope: meta.block.gpc punctuation.section.block.begin
      set:
        - meta_content_scope: meta.block.gpc meta.function.gpc
        - match: '\}'
          scope: punctuation.section.block.end.gpc meta.function.gpc meta.block
          pop: true

        - include: expressions
  enum-block:
    - match: '\{'
      scope: meta.block.gpc punctuation.section.block.begin
      set:
        - meta_content_scope: meta.block.gpc meta.enum.gpc
        - match: '\}'
          scope: punctuation.section.block.end.gpc meta.block
          pop: true

        - match: '[A-z0-9=_-]+'
          scope: storage.type.enum.gpc

  #statements
  statements:
    - match: '\b{{gpc_control}}\b'
      scope: keyword.control.gpc
      set: expressions
    - match: '\bif\b(?=\s*\{)'
      set:
        - match: \(


  #call
  call:
    - meta_content_scope: meta.function-call
    - match: '{{identifier}}(?=\s*\()'
      scope: variable.function.gpc
      set: parens

  #operators
  operators:
    - match: '(\+\+|--|\*|/|%|\+|-)'
      scope: keyword.operator.arithmetic.gpc
    - match: '(&|\||\^|<<|>>)'
      scope: keyword.operator.bitwise.gpc
    - match: '(&&|\|\||\^\^|!|>=|<=|<|>)'
      scope: keyword.operator.logical.gpc
    - match: '(\+=|-=|\*=|/=|%=|=)'
      scope: keyword.operator.assignment.gpc

  #comments
  comment:
    - match: '//'
      scope: punctuation.definition.comment.gpc
      push:
        - meta_scope: comment.line.double-slash.gpc
        - match: $\n?
          pop: true

    - match: '/\*'
      scope: punctuation.definition.comment.gpc
      push:
        - meta_scope: comment.block.gpc
        - match: '\*/'
          pop: true

  #strings
  string:
    - match: '([\"''])((?:(?=(?:\\)*)\\.|.)*?)(\1)'
      scope: punctuation.definition.string
      captures:
        1: punctuation.definition.string.begin
        2: punctuation.definition.string
        3: punctuation.definition.string.end

  #integers
  integer:
    # dec
    - match: '\b\+?[0-9]+\b'
      scope: constant.numeric.integer.decimal constant.numeric.value.gpc
    # hex
    - match: '\b0x[0-9A-Fa-f]+\b'
      scope: constant.numeric.integer.hexadecimal constant.numeric.value.gpc